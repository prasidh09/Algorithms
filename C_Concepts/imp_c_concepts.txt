1. Are the two statements same? *ptr++ and ++*ptr?
    No. *ptr++ increments the pointer alone and does not touch the value in it. 
        ++*ptr incrmenets the value being pointed to by the pointer. This also can be done by (*ptr)++

2. What is the equivalent pointer expression for a[i][j][k][l]?
    *(*(*(*(a+i)+j)+k)+l)
    'a' is the base address of the 4D array. 

3. Struct Hack
---------------
	Source: http://www.geeksforgeeks.org/struct-hack/
	This is used for creating variable sized structs. Mostly used in data packets. 
	When we dont know the actual size of the data that will be received and we need a struct
	to accomodate such a data packet, we can use this. It is usually defined as follows.
	struct emp{
		int id;
		int name_len;
		char name[0]; // Just a place holder
	}
	Sizeof this struct is 4+4+0 = 8 bytes
	In gcc, when we create an array of zero length, it is considered as array of incomplete type that’s why gcc 
	reports its size as “0″ bytes. This technique is known as “Stuct Hack”. 
	When we create array of zero length inside structure, it must be (and only) last member of structure
	
	struct emp *e = malloc(sizeof(*e) + sizeof(char) * 128);  is equivalent to the structure
        struct emp{
                int id;
                int name_len;
                char name[128]; // In this case, 128 bytes is fixed. What if we dont know this size?
        }

	Alternatively we can use a char* instead. 
        struct emp{
                int id;
                int name_len;
                char *name; // A char pointer instead of name[0]
        }
	Disadvantages in this approach:
	The memory allocated for name might not be contiguous.
	We need to two malloc and two free calls. Programmers usually free the global emp memory but forget to free 
		the memory pointed to by the char*. 

	Thus to avoid all these confusions, we use the technique called struct hack


4. Const pointers and pointers to constants
--------------------------------------------
	This is how we should declare a pointer to a constant.
	const char *p; // p is a pointer to a constant character. The value pointer by p cannot be changed
	char * const p; // p is a constant pointer to a character. p cannot be changed.
	Constant pointer:
	------------------
		int var1=0, var2=0;
		int * const p = &var1;
		p = var2; // Changing the pointer results in a compilation error
	Pointer to a constant:
	----------------------
		const char *s = "hello";
		++*s; // Changing the value pointed by s. 	


5. Difference between declaration and definition
------------------------------------------------
	Declaration of a variable/function simply declares that the variable/function exists somewhere in the memory but
	memory is not allocated for them. It is important because the type of the variable/function is known. Thus when
	a variable is declared, the program knows about the type of the variable. In the case of function the program
	will know about the prototype. 
	Definition of a variable/function allocates memory for the varaible/function. 
	How will you declare a C variable without defining it.
		Ans: extern int i;

6. Extern keyword in C
------------------------
	Extern with functions:
	-----------------------
	By default, the declaration and definition of a C function have 'extern' prepended with them. i.e Eventhough we dont use
	extern with the declaration/definition of functions, it is present. For ex,
	when we write, 
		int foo(int arg1, char arg2);
	the compiler treats them as 
		extern int foo(int arg1, char arg2);
	The extern keyword extends the visibility to the whole program. The function can be used from any of the files, provided
		the declaration is known. By seeing the declaration of the functions, the C compiler thinks that the function
		exists and it goes ahead to compile the program. 

	Extern with variables:
	----------------------
	We can declare the variables without defining it by using extern int var;
	When writing the definition of a function, extern is prepended by defualt. But for variables it is not. 
	
	// Compilation error - var is declared but not defined anywhere
	extern int var;
	void main(){
		return 0;
	}

	// Works!
	extern int var = 0; // When declaration has also has an assignment, then the variable is actually defined.
	void main(){
		return 0;
	}

	Generally, extern keyword specifies to the compiler that memory for the variable is allocated elsewhere and that
	address is given to the current program at the time of linking. The linker will search if memory is allocated for
	the variable in any other program. 

7. Implement sizeof operator in C
	#define my_sizeof(type) ((char*)(&type+1) - (char*)&type)
	
	If we dont use a char* here, then -(&type) will reduce four times (&type) if the type is an integer. Even if we give 
	-1, it is going to reduce by 4 if it is an integer. So we typecast it to char*. Thus 
	
   	int a;
	if my_sizeof(a);
	
	Let address of a is 100. my_sizeof(a) = ((char*)(100 + 1) - (char*)100)
					      = ((char*)104 - (char*)100)
					      = 4

8. Offset of a member in struct
	#define my_offset(type, e) (&((type *)0)->e)

	struct abc {
    		int a;
    		int b;
    		char c;
    		char d;
	};
	This should be called as my_offset(struct abc, d);
	This will work as the NULL address is typecasted to the structure. so 0 will be considered as the starting address of
		the structure. When d is accessed, it adds the padding and go forward x bytes from 0. Thus d is found at 0+x.
		The address of this is returned as x.
